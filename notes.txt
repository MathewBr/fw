Урок 2. Структура приложения.
=============================
ModuleViewController
Composer
{
  "autoload": {
    "psr-4": {
      "fw\\": "vendor/own",
      "app\\": "app"
    }
  },
  "require": {}
}

Урок 3. Конфигурация приложения.
================================
1. Настроить переадресацию на public в .htaccess
2. Создаём конфигурационный файл init
3. Подключаем автозагрузчик composer

Урок 4. Класс реестр
====================
Задача реестра:
	- автоматически создать необходимые объекты при запуске приложения;
	- предоставить доступ из любого места приложения к этим объектам;
	- обеспечить общее место для хранения параметров запуска приложения;
Объект класса реестр создаётся в единственном экземпляре, который хранится в контейнере класса App.
Доступ к контейнеру класса App можно получить из любого места приложения как к статическому свойству.
В объекте класса Registry есть массив параметров приложения.
Любой созданный объект класса App автоматически заполняет массив параметров при инициализации и позволяет записать/получить из любого места.

Урок 5. Класс обработки ошибок.
===============================
Можно назначить пользовательский обработчик ошибок, которые будер работать с учетом режима работы.
set_error_handler([$this, 'errorHandler']);

Но пользовательский обработчик может обработать ошибки не всех уровней.

Для фатальных ошибок надо делать перехват по событию завершения работы скрипта:
	- буферизуем вывод;
	- получаем последнюю ошибку;
	- обрабатываем как нама надо;
ob_start(); //prevent browser output
register_shutdown_function([$this, 'fatalErrorHandler']); //at the end of the script

Для обработки исключений - свой обработчик:
set_exception_handler([$this, 'exeptionHandler']);

Урок 6. Часть 1. Маршрутизатор.
==============================
На основе массива регулярных выражений, называемых правилами, обрабатывает url запрос.
При найденном совпадении, разбирает url, и вызывает соответствующий контроллер и действие.
Структура url: контроллер/действие/параметр?get-параметры.
Структура может быть специализирована для определённых контроллеров, действий или параметров специальными правилами, заданными в routes.php
Например, если встретился такой-то контроллер, с таким-то действием, значит задаём [controller=>'', action=>''] специальные.
Специальные правила должны быть выше, т.е. ближе к началу массива с правилами.

Урок 7. Часть 2. Маршрутизатор.
==============================
Совпавшее регулярное выражение - является ключем в массиве, которому сопоставлен массив, в котором указаны или нет контроллер, метод и префикс.
	Префикс нужен для того, чтобы отделить пользовательскую часть от админской.
В свою очередь, регулярное выражение может вычленять из url название контроллера и метода, которые добавляются в сопоставленный массив
и сохраняются в свойстве класса.
Если что-то не вычленено или не указано, записываются контроллер и метод по умолчанию.
Имена контроллера и метода приводятся в соответствие с PSR-4 и вызываются, если они существуют. Если нет - исключение.

Урок 8. Базовый контроллер
===========================
