Урок 2. Структура приложения.
=============================
ModuleViewController
Composer
{
  "autoload": {
    "psr-4": {
      "fw\\": "vendor/own",
      "app\\": "app"
    }
  },
  "require": {}
}

Урок 3. Конфигурация приложения.
================================
1. Настроить переадресацию на public в .htaccess
2. Создаём конфигурационный файл init
3. Подключаем автозагрузчик composer

Урок 4. Класс реестр
====================
Задача реестра:
	- автоматически создать необходимые объекты при запуске приложения;
	- предоставить доступ из любого места приложения к этим объектам;
	- обеспечить общее место для хранения параметров запуска приложения;
Объект класса реестр создаётся в единственном экземпляре, который хранится в контейнере класса App.
Доступ к контейнеру класса App можно получить из любого места приложения как к статическому свойству.
В объекте класса Registry есть массив параметров приложения.
Любой созданный объект класса App автоматически заполняет массив параметров при инициализации и позволяет записать/получить из любого места.

Урок 5. Класс обработки ошибок.
===============================
Можно назначить пользовательский обработчик ошибок, которые будер работать с учетом режима работы.

Но пользовательский обработчик может обработать ошибки не всех уровней.
Для фатальных ошибок надо делать перехват по событию завершения работы скрипта:
	- буферизуем вывод;
	- получаем последнюю ошибку;
	- обрабатываем как нама надо;

