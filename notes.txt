qУрок 2. Структура приложения.
=============================
ModuleViewController
Composer
{
  "autoload": {
    "psr-4": {
      "fw\\": "vendor/own",
      "app\\": "app"
    }
  },
  "require": {}
}

Урок 3. Конфигурация приложения.
================================
1. Настроить переадресацию на public в .htaccess
2. Создаём конфигурационный файл init
3. Подключаем автозагрузчик composer

Урок 4. Класс реестр
====================
Задача реестра:
	- автоматически создать необходимые объекты при запуске приложения;
	- предоставить доступ из любого места приложения к этим объектам;
	- обеспечить общее место для хранения параметров запуска приложения;
Объект класса реестр создаётся в единственном экземпляре, который хранится в контейнере класса App.
Доступ к контейнеру класса App можно получить из любого места приложения как к статическому свойству.
В объекте класса Registry есть массив параметров приложения.
Любой созданный объект класса App автоматически заполняет массив параметров при инициализации и позволяет записать/получить из любого места.



Урок 5. Класс обработки ошибок.
===============================
Можно назначить пользовательский обработчик ошибок, которые будер работать с учетом режима работы.
set_error_handler([$this, 'errorHandler']);

Но пользовательский обработчик может обработать ошибки не всех уровней.

Для фатальных ошибок надо делать перехват по событию завершения работы скрипта:
	- буферизуем вывод;
	- получаем последнюю ошибку;
	- обрабатываем как нама надо;
ob_start(); //prevent browser output
register_shutdown_function([$this, 'fatalErrorHandler']); //at the end of the script

Для обработки исключений - свой обработчик:
set_exception_handler([$this, 'exeptionHandler']);

Урок 6. Часть 1. Маршрутизатор.
==============================
На основе массива регулярных выражений, называемых правилами, обрабатывает url запрос.
При найденном совпадении, разбирает url, и вызывает соответствующий контроллер и действие.
Структура url: контроллер/действие/параметр?get-параметры.
Структура может быть специализирована для определённых контроллеров, действий или параметров специальными правилами, заданными в routes.php
Например, если встретился такой-то контроллер, с таким-то действием, значит задаём [controller=>'', action=>''] специальные.
Специальные правила должны быть выше, т.е. ближе к началу массива с правилами.

Урок 7. Часть 2. Маршрутизатор.
==============================
Совпавшее регулярное выражение - является ключем в массиве, которому сопоставлен массив, в котором указаны или нет контроллер, метод и префикс.
	Префикс нужен для того, чтобы отделить пользовательскую часть от админской.
В свою очередь, регулярное выражение может вычленять из url название контроллера и метода, которые добавляются в сопоставленный массив
и сохраняются в свойстве класса.
Если что-то не вычленено или не указано, записываются контроллер и метод по умолчанию.
Имена контроллера и метода приводятся в соответствие с PSR-4 и вызываются, если они существуют. Если нет - исключение.

Урок 8. Базовый контроллер
===========================
Предназначен для общего кода для всех контроллеров. От базового контроллера наследуют все остальные.
Наследует через промежуточный AppFeature, в котором мы можем определить какой-то особенный для конкретного приложения код.
В папке с видами для каждого метода контроллера (экшена) создаются папки с соответствующими именами.

Урок 9. Общий класс вида. Часть 1.
==================================
Вызывается в общем классе контроллера Controller.
В общий класс вида передаются все необходимые данные, полученные в результате роутинга для постоения путей к шаблону и виду.
Передаются данные для построения тега meta.
Также есть контейнер для передачи каких-либо других данных, если необходимо.
Ключевая фишка в том, что для вставки вида в шаблон используется буферизация.

Урок 10. Общий класс вида. Часть 2.
==================================
Данные в вид передаются простым записыванием в свойство $data в любом контроллере, унаследовавшем от base Controller.
Передать можно все, запаковать в массив, распаковать и т.д.
Метод render класса View, использующий данные получает их от свойства $data контроллера Controller.

Урок 11. Класс модели.
=======================
Класс модели предназначен для работы с данными в широком смысле.
	1. Подключение к базе данных реализовано классом (паттерн singletone).
	2. Устанавливаем redbinphp.
	
Урок 12. ORM RedBeanPHP
=======================
За подключение к базе используется класс Db, который использует паттерн singletone.
Объект класса Db создается в базовом классе Model.
Класс AppModel наследует от базового Model и является транзитным как AppFeature.
Объект класса AppModel создаётся в транзитном AppFeature.
Через транзитный AppFeature в любом контроллере есть доступ к подключению к базе данных и классу R библиотеки redbeanPHP.

База->Db->Model->AppModel extends Model->AppFeature->MainController extends AppFeature (или любой другой контроллер).
Из контроллера данные передаются в шаблон или вид. Где и используются.

Урок 13. Класс для кэширования.
===============================
Запись и чтение из файла. Самостоятельный класс.
**************************************************************************************************************************************

Урок 1. Перенос шаблона в структуру CMS
========================================
В шаблоне вычленяем постоянную часть и переменную.
Постоянную помещаем в layout-> шаблон.php, а переменную - в вид, для соответствующего контроллера.

Урок 2. Структура базы данных.
==============================

Урок 3. Вывод брендов
======================
В базе получаем данные в массив (в контроллере). Передаём в вид. В виде в цикле выводим.

Урок 4. Вывод популярных товаров.
=================================
Все тоже самое, главное понятная структура. Из планов по улучшению - проверка наличия указанной картинки и ленивая загрузка.
								   - стабильность верстки при отложенной загрузке изображений.
Урок 5. Виджет выбора валют. Часть 1.
=====================================
Из базы данных получаем ассоциативный массив доступных валют, который записываем в объект класса Registry.
	Обращение к классу ядра App обрабатывается автозагрузчиком Composer (App::$appContainer).
	В статическом свойстве $appContainer класса App хранится ссылка на объект в единственном экземпляре Registry 
										(self::$appContainer = Registry::instance();).
	В объекте Registry, в свою очередь, есть свойство, содержащее параметры и методы для получения и записи этих параметров.
Текущюю валюту записываем туда же предварительно получив код текущей валюты (если есть - из куки, если нет - по умолчанию).

Урок 6. Виджет выбора валют. Часть 2.
=====================================
Виджет - часть кода, генерируемого отдельным классом, который вставляется в вид при определённых условиях.

Отдельный класс Currency статичными методами получает массив доступных валют из базы данных и
			значение текущей валюты (из cookie или по-умолчанию).
В промежуточном общем классе AppFeature, используя статичные методы класса Carrency записываем в контейнер приложения 
	массив доступных валют и значение текущей валюты.
	(Почему сразу в классе Carrency это не сделать, создав экземпляр класса в AppFeature???)
В шаблоне создаётся объект класса Carrency, который использует ранее полученные значения валют рендерить виджет в нужном месте.

Текущую валюту, при изменении выбора, надо записать в куки. За это отвечает CurrencyController.

Урок 7. Пересчет цены товара в выбранной валюте.
================================================
В шаблоне мы имеем доступ к массиву текущей валюты. Выводимая цена пересчитывается путем умножения на множитель.
Символ валюты тоже в этом массиве (правый или левый). В шаблоне выводим.

Урок 8. Виджет категорий (menu). Часть 1
==========================================
Реализуем отдельным виджетом.
Из базы данных получаем перечень категорий в виде массива.
Этот массив храним в кэше и записываем в контейнер (на всякий случай).
Из этого массива категорий в отдельном классе формируем Html дерево, которое будем выводить в отдельный подключаемый шаблон.

Урок 9. Виджет категорий (menu). Часть 2
==========================================
Из многомерного массива формируем код html меню, записывая его в переменную-строку.
Функция формирования кода меню помещает данные из элемента массива (это тоже массив) в подключаемый шаблон-виджет.
Если элемент массива имеет дочерний подмассив (ключ child) - запускаем рекурсивно функцию формирования кода html, передав ей подмассив.
Рекурсию запускаем в подключаемом шаблоне-виджете.
Код кэшируем для повторного использования.
Вся работа в объекте класса Menu, который создаётся в основном шаблоне.

Урок 10. Виджет категорий (menu). Часть 3
==========================================
Собственно, подключаем уёбищное megamenu-js.

Урок 11. Карточка товара. Часть 1.
========================================
В ссылках в карточках товаров которые формируются видом по-умолчанию index.php, отображаемом в главном шаблоне watches.php формируются
ссылки a href="product/<?=$hit->alias?>".
Следовательно, роутер перенаправляет по новому правилу '^product/(?P<alias>[a-z0-9-]+)/?$', ['controller' => 'Product', 'action' => 'view']
на контроллер ProductController действие view.

В этом методе по заданному alias из базы получаем данные по данному товару и передаём в вид.

Урок 12. Карточка товара. Часть 2.
========================================
Переданные данные в виде вставляем в соответствующие места, например <?=$product->id;?>

Урок 13. Карточка товара. Модуль связанных товаров.
===================================================
Запрос к таблице "связанные товары" и построение карточек по переданным в вид данным.
Не плохо бы реализовать карточку одним виджетом.

Урок 14. Карточка товара. Галерея.
==================================
В базе таблица содержащая галерею различных видов одного и того же товара.

Урок 15. Карточка товара. Модуль посмотренных товаров.
======================================================
Управление в контроллере ProductModel.
Просмотренные товары при формировании вида отдельного товара, id товара записывается в куки (каждое id через разделитель в виде строки).
При формировании вида, проверяются куки, если есть с заданным ключем - разбиваем строку на массив.
По массиву формируем запрос к базе данных и передаем ответ в вид.
В виде по аналогии формируем карточки товаров под заголовком "недавно просмотренные".

Урок 16. Карточка товара. Хлебные крошки.
=========================================
В статическом классе Breadcrumbs формируем массив крошек от главной страницы до элемента проходя по пути всех категорий.
В виде выводим списком.

Урок 17. Карточка товара. Модификации товара.
=============================================
Просто запрашиваем в ProductController данные по наличию модификаций данного товара в базе данных в таблице modification, 
передаём в вид для построения списка выбора модификаций select.
Дальнейшая работа по изменению данных той или иной модификации через js по событию change.
Механизм передачи данных:
	- через переменные в глобальной области видимости для js (передаётся из php при формировании страницы в блоке <script>)
		тупо строкой <script> let var = <?=value?> </script>. Потом в скрипте js обращаемся к ней.
	- через пользовательские аттрибуты html - data-myattribute, а в скрипте js потом их получаем.
	- можно рассмотреть ч/з coocie, localstorage, fetch...

Урок 18. Корзина. Часть 1.
==========================
Скриптом на каждый элемент, который имеет отличительный признак добавления товара в корзину (класс, например .add-to-cart-link)
вешаем через делегирование обработчик $('body').on('click', '.add-to-cart-link', function (e){...
который отправляет запрос на специальный контроллер (CartController).
Контроллер, получив запрос, вытащив данные из get,post... запроса ищет товар и модификацию в базе.
Как обычную страницу отправляет ответ, который возвращается как результат в запрос.

Урок 19. Корзина. Часть 2.
==========================
Вызвать котроллер CartController можно: и прямым переходом по ссылке /cart/add (например). 
					и ajax запросом (в котором url указан как /cart/add).
Поскольку контроллер наследует базовый контроллер, который запускает и отображение вида, нужен соответствующий вид,
	или перенаправление пользователя куда-нибудь, где вид есть.
НО, в случае ajax запроса мы не хотим получать отдельный вид (перезагружать стрницу), нам нужно только получить данные.
Следовательно, надо отличать, когда сервер получил ajax запрос, а когда произошел переход по ссылке.
В случае ajax запроса отдать данные, а последующий код die().
Для решения этих вопросов в базовом Controller есть два метода:
	- один отличает способ запроса
	- второй отдаёт часть данных, а остальной код убивает.
При обычном переходе по ссылке redirect() туда, откуда пришли.

Пересчет цен в разных валютах в карточках товара и корзине организован таким образом:
	в базе храним только базовую цену и коэффициент перевода одной валюты в другую
	везде, где происходит подготовка страницы к выводу и используется валюта - делаем пересчет, руководствуясь валютой из куки или поумолчанию.

Урок 20. Корзина. Часть 3.
==========================
Итак. При клике на элементе добавления товара в корзину, js вытаскиваем данные о добавляемом товаре, формируем запрос к CartController.
При обращении к контроллеру CartController, методу addAction (добавление товара в корзину):
	- вытаскиваем данные о добавляемом товаре или его модификации из базы
	- в классе модели Cart готовим данные для ответа на ajax-запрос и записываем данные о товаре в корзине в сессию
	- в CartController отправляем ответ от сервера для формы корзины (которая в основном шаблоне watches.php скрыта перед футером)
	- ответ отправляется унаследованным от базового контроллера методом, который формирует html код на основе подключаемого шаблона,
		используя данные о добавленных в корзину товарах (массив) из сессии (можно записать в базу данных, тогда надо из получить)
При получении ответа js вставляет полученный фрагмент html кода в скрытую форму корзины и отображает её.

Весь фронтед на bootstrap в том числе, основное поведение элементов.

Урок 21. Корзина. Часть 4.
==========================
Кнопка "показать корзину" ajax-запросом получает содержание корзины из session и отображает её.
Актуализация данных виджета корзины (в header пустая ли она или на какую сумму там товар) js скриптом при обновлении данных в самой корзине.
В качестве момента обновления даннх в корзине выбран вызов функции showCart, поскольку она вызывается при любом изменении данных в корзине.

Удаление элементов из карзины:
	-минусовать итого и количество (сервер)
	-удалить товар из корзины в сессии (сервер)
	-обновить отображение (клиент)

Все функции управления карзиной основаны на ajax-запросах на контроллер CartController и соответствующий метод этого контроллера.

Урок 22. Корзина. Часть 5.
==========================
Очистка корзины.
	Кнопка очистки отправляет ajax-запрос на контроллер, метод которого очищает всё в сессии.
Пересчет корзины. 
Запускается при изменении валюты, в CurrencyController. Переписываем в сессии значения сумм и редеректим назад. Значения в сессии изменяются.

Урок 23. Поиск. Часть 1.
========================
https://github.com/corejavascript/typeahead.js/
Все отдано на откуп сторонней библиотеке. Как она работает не ясно. К форме поиска подключен скрипт из документации к библиотеке.
Библиотека из указанного удаленного источника (можно локального) ищет совпадения запросом like и выдаёт возможные варианты.
Стилевое оформление виджета поиска тоже стороннее, в той же библиотеке + докручено своим css.
Внешне библиотека работает так:
	- при вводе в поле поиска символа отправляется ajax-запрос к указанному источнику, который выбирает возможные совпадения.
	- массив возможных совпадений возвращается библиотеке, которая отображает это у клиента.
	- при клике на выбранное совпадение - обращение к контроллеру SearchController indexAction, в get параметре запроса из поля ввода 
	передаётся выбранный вариант.

Урок 24. Поиск. Часть 2.
========================
В контроллере SearchController в indexAction реализуем показ результатов поиска.
Из GET параметра извлекаем что было введено в строку. Ищем в базе. 
В вид передаём массив найденных товаров. В виде отображаем по аналогии.
Не плохо бы все повторяющиеся фрагменты (хлебные крошки, плитка товара) выделить в отдельные виджеты, что-бы не повторяться в видах.

Урок 25. Товары категории.
==========================
Навигация по категориям обрабрабатывается контроллером CategoryController, для чего добавляем правило в routes.php.
При клике на ссылку показа товаров определенной категории, переход на контроллер/экшен category/view.
Контроллер вытаскивает все вложенные в данную категорию id товаров и передаёт в вид.
Соответствующий вид (view в папке category) отображает.

Урок 26. Класс Pagination.
==========================
Вся работа пагинации построена на лимитированном запросе к базе. Запросить указанное количество записей, начиная с ...
Все данные вычисляются в объекте класса Pagination, а также строится Html и передаётся в вид.

Урок 27. Регистрация. Часть 1.
==============================
Элемент IU показывает форму регистрации. Форма отправляет данные на UserController. 
Модель User, объект которой создаётся в UserController методом selectiveLoading из массива $_POST загружает те значения в свойство объекта
(массив) которые имена которых определены в данном свойстве объекта.
Смысл - выбрать из post только те значения, имена которых мы ожидаем.

Урок 28. Регистрация. Часть 2.
==============================
Валидация на сервере - https://packagist.org/packages/vlucas/valitron
В базовом классе Model.
Используемый вариант: в объект класса Validator передаём настройки rules. Валидатор возвращает true/false.
Ошибки записываются в свойство объекта Model.
Решение о том, что показывать в зависимости от результатов валидации принимается в объекте класса UserController путем записи
	в сессию готового кода, в шаблоне же проверяется наличие в сессии соответствующей записи, если есть - выводится.

Урок 29. Регистрация. Часть 3.
==============================
В случае прохождения валидации, записываем данные пользователя в базу данных, предварительно проверив нет ли записей с аналогичным
login и email. Если есть дубли, в массив-свойство errors записываем об этом. 
Код на сервере блокирует блокирует запись в базу, а шаблон отражает ошибки, записанные в сессию из массива errors класса Model.

Урок 30. Регистрация. Часть 4.
==============================
Валидатор на клиенте.
Валидация на клиенте. https://1000hz.github.io/bootstrap-validator/
Вся эта валидация основана на подключении библиотеки. Как обезьяна, надо не понимая как это работает, тупо следовать документации.
Подключить форму к валадатору - аттрибут в форме data-toggle="validator".
Чтобы не вводить второй раз данные в форму в случае не прохождения валидации на сервере, запоминаем post в session, 
 а в шаблоне вытаскиваем в поле input в атрибут value.

Урок 31. Регистрация. Часть 5.
==============================
Вход. При обращении к соответствующему loginAction, проверяем есть ли такой пользователь в базе.
При наличии пользователя, проверяем совпадают ли пароли. Если совпадают, записываем данные пользователя в session и редиректим на
страницу для зарегистрированных пользователей.

Урок 32. Оформление заказа. Часть 1.
====================================
Если пользователь авторизован - есть user в session. Если есть товары в корзине - есть cart в session.
У метода purchase (покупка) кнопка "оформить заказ" есть свой вид. Вид наподобие корзины.
Если нет в session user (пользователь не авторизован) - отображается форма регистрации внизу. 
Метод ordergoodsAction класса CartController обрабатывает кнопку "оформить". Регистрирует пользователя, если он не зарегистрирован,
	 а также готовит данные для дальнейшей обработки (user_id и user_email).

Урок 33. Оформление заказа. Часть 2.
====================================
Объект модели Order сохраняет запись о сделанном заказе в таблицу order и о товарах, входящих в данный заказ в таблицу order_broduct.

Урок 34. Оформление заказа. Часть 3.
====================================
Отправка почты. https://packagist.org/packages/swiftmailer/swiftmailer
		https://swiftmailer.symfony.com/docs/introduction.html

Урок 35. Оформление заказа. Часть 4.
====================================
Устанавливаем, настраиваем отправку почты. См. документацию.
Для пущей надежности можно применить sql транзакции. 

Урок 36. Фильтры. Часть 1.
==========================
https://zlob.in/2013/01/struktura-tablic-dlya-kataloga-tovarov-internet-magazina/
http://softtime.ru/forum/read.php?id_forum=3&id_theme=88061
https://gist.github.com/greabock/afc4a08577806b60dc61

Фильтры реализуются виджетом. Из базы получаем возможные признаки для выбора товаров в виде массива на основании которого строим вид.

Урок 37. Фильтры. Часть 2.
==========================
На клиенте по событию шлем ajax запрос в метод CategoryController, который из get запроса получит строку с запрашиваемыми опциями.

Урок 38. Фильтры. Часть 3.
==========================
В основном, работа фильтра строится на правильном запросе к БД.
Интересна методика запоминания выбранных категорий. Запоминаем в url используя объект history. 
Т.е. меняем url без перезагрузки страницы, куда записываем url?filter=1,2,5,8, откуда берем данные для обработки в контроллере.
При перезагрузке одной и тойже страницы url не меняется, сохраняются и get параметры. При переходе на другую страницу все обнуляется.

Урок 39. Фильтры. Часть 4.
==========================
Устранили проблему запоминания сделанного выбора (чтобы при перезагрузке страницы не пропадал сделанный выбор).
В вид передаём массив выбранных фильтров или делаем доступным при подключении шаблона в классе Filter медод getHtml.
В шаблоне в цикле проходим и сравниваем id атрибута и если он есть в массиве выбранных фильтров соответствующему input пишем атрибут chicked.

Устранили проблему дублирования get параметра filter= в url. В пагинации пилим url и в фильтрах пилим url, возникает дублирование параметра
при пагинации. Тупо, если есть два параметра filter, первый выпиливаем.

Данные фильтры вытаскивают все товары, где есть такой атрибут в пределах одной категории без группировки 
(вытащит и механические часы если выбраны и электронные даже если задан к ним обоим дополнительный параметр, например тип стекла
, не механические с таким стеклом и электронные с таким стеклом, т.е. похер даже если такого стекла нет у какогото типа часов).

Урок 40. Фильтры. Часть 5.
==========================
Изменили запрос к БД таким образом, чтобы получать только те товары, у которых есть сочетание атрибутов фильтра.
SELECT `product`.*  FROM `product`  WHERE category_id IN (6) AND id IN
    (
    SELECT product_id FROM attribute_product WHERE attr_id IN (1,5) GROUP BY product_id HAVING COUNT(product_id) = 2
    )
Группируются id продукта и выбираются те, которые имеют указанное количество групп атрибутов. Количество выбранных групп атрибутов
 (механизм, стекло, ремешок ....) вычисляется в Filter.

************************************************************************************************************************************
ЧАСТЬ 3

Урок 1. Подключение шаблона админки.
====================================
Для админки используем шаблон https://adminlte.io/
Не изменяемую часть в layout - admin.php, изменяемую часть в views - index.php

Урок 2. Авторизация администратора. Контроль доступа.
=====================================================
Для входа как admin существуют две формы. Одна допускает админа как обычного пользователя, другая если в User::login передан параметр true,
даёт доступ к виду администратора. Во втором случае проверяется роль юзера по базе данных.

Если вход осуществляется как администратор через специальную форму (admin/UserController), роль в базе admin и пароли совпадают, 
происходит редирект на вид Панель администратора.

За разграничение UserController и admin/UserController отвечает префикс в url - /admin. Простое переименование для разграничений
можно внедрить переписав правила в route.php и в классе Route образование имени вызываемого класса.

Урок 3. Виджеты главной страницы.
=================================
Из базы получаем данные о количестве необработанных заказов, пользователей, продуктов и категорий.
Передаём в вид и отражаем в карточках.

Урок 4. Список заказов.
=======================
Работает OrderController, запрос в БД, отдаёт в вид. 

Урок 5. Часть 1. Обработка заказа.
==================================
Данные, собранные по конкретному заказу, передаются в вид, и отражаются в виде таблицы.

Урок 6. Часть 2. Обработка заказа.
==================================
Обработка заказа сводится к внесению изменений в базу о состоянии товара из соответствующего(их) вида(ов).

Урок 7. Часть 1. Управление категориями.
========================================
Удаление при обращении к админскому CategoryController::deleteAction. 

Урок 8. Часть 2. Управление категориями.
========================================
Интересен способ выделения активных пунктов меню: сравнивается href ссылки с url, при совпадении - выделяется.

Урок 9. Часть 3. Управление категориями.
========================================
В виде форма. Валидация формы - https://1000hz.github.io/bootstrap-validator/.
В модель категории загружаем все необходимые данные для полей таблицы, кроме алиаса, который генерируем.
Уникальность алиаса обеспечиваем, если он дублируется, присоединением к транскрибированному title id, полученный при сохранении записи.
То есть, сначала сохраняем запись без алиаса, потом генерируем алиас, обеспечиваем его уникальность и дописываем в базу данных.

Урок 10. Часть 4. Управление категориями.
=========================================
Добавление категории. В AppModel добавили методы, которые получают из кирилического title получают транслированный alias, проверенный 
на уникальность.

Урок 11. Часть 5. Управление категориями.
=========================================
Редактирование категории. По аналогии с добавлением категории. Таже форма, строим вид, добавляя (передавая) данные по данной
категории из базы в вид. В полях формы, для отображения редактируемых данных добавляем атрибут value со значениями из базы.
Для передачи инфы о том, какую категорию редактируем используем скрытое поле в форме.
Перемещение категории - присвоением родительской категории.
При изменении title не забыть сформировать новый alias.

Урок 12. Управление кэшем.
==========================
CacheController в админской части. В виде строим таблицу с описанием существующих файлов кэша. На ссылки вешаем вызов 
CacheController::deleteAction. Всё.

Урок 13. Часть 1. Управление пользователями.
============================================
UserController::editAction в админской части. Выводим форму, значения в полях проставляем из БД.
Валидируем. Submit на ADMIN/user/edit перезапишет данные по данному пользователю в БД.

Урок 14. Часть 2. Управление пользователями.
============================================
Выводим список заказов пользователя. Делаем выборку по данному пользователю из БД, и отражаем в виде edit. 

Урок 15. Часть 3. Управление пользователями.
============================================
Редактирование пользователя.
Работа в User админской части, унаследованного от User пользовательской части.
Запрашиваем данные из БД для отражения в форме. При сохранении изменений, проверяем нет ли такого же login и email, кроме текущей записи.
Если всё ок, сохраняем.

Урок 16. Часть 4. Управление пользователями.
============================================
Добавление пользователя.
По аналогии с регистрацией, вернее даже из вида администратора отправляем запрос на пользовательский UserController::signupAction.
Только в форме добавлена возможность выбора роли.

Урок 17. Часть 1. Управление товарами, список товаров.
======================================================
Вывод списка товаров и пагинация

Урок 18. Часть 2. Управление товарами, список товаров.
======================================================
Форма добавления. Строим форму добавления, предусматривая все поля для таблицы, кроме alias, который будет формироваться автоматически.
Добавляем запись в таблицу. Почему в ENUM в БД redbeanPHP не добавляет в поле выбранное значение?? При изменении на int всё работает.

Урок 19. Часть 3. Управление товарами, список товаров.
======================================================
Добавление редактора. - https://ckeditor.com/
В AdminLTE уже есть в bower_components папка ckeditor.
Для загрузки картинок используем файловый менеджер (не поддерживаемый) - https://packagist.org/packages/sunhater/kcfinder.
СТОЛКНУЛСЯ С СЛОЖНОСТЬЮ ПРИ ЗАГРУЗКЕ КАРТИНОК, ckeditor4 не корректно работает в ЯндексБраузере, хотя в Chrome все корректно.
Через CDN ckeditor5 в Яндексе вроде работает, но файловый менеджер настраивается совсем по-другому. ЧИТАТЬ ИНСТРУКЦИЮ. 

Текстовый редактор summernote.
Нихрена не получилось прикрутить файловый менеджер. Реализовано стандартными средствами PHP.

Урок 20. Управление товарами, добавление фильтров.
==================================================
В форме добавления товара рисуем вкладки с checkbox-ами. Имена checkbox-ов это номера id групп атрибутов, их 5.
value checkbox-ов - это id самих атрибутов.
Скриптом наделяем checkbox-ы свойствами радиокнопок. В группе можно выбрать только один атрибут.
На сервере получаем массив, ключи - номера групп, значения - номера атрибутов.

Метод класса Product::aditFilter получая id товара и данные из формы (отмеченные checkbox-ы) и сравнивая что введено, а что было,
производит изменения в таблице attribute_product.

Урок 21. Управление товарами, связанные товары. Часть 1.
========================================================
Поле select стилизовано под https://select2.org/
Работает по принципу поисковой строки. Виджет при внесении изменений (наборе текста) отправляет запрос в БД.
На серевере из БД выбираются похожие строки и отправляются в специальном формате. Виджет перестраивается.

Урок 22. Управление товарами, связанные товары. Часть 2.
========================================================
Product::editRelatedProduct. Всё по аналогии с добавлением фильтров. По массиву, поступившему в $_POST,
метод определяет какие изменения внести в таблицу related_product и делает это.

Урок 23. Управление товарами, загрузка картинок. Часть 1.
=========================================================
Используется какой-то древний код - загрузчик изображений. Используются виджеты bootstrap, которые красиво оформлены
и работают как input type="file". Загрузчик отправляет загружаемые файлы ajax-ом в ProductController::addImageAction.

Урок 24. Управление товарами, загрузка картинок. Часть 2.
=========================================================
Загруженные картинки обрабатываются (обрезаются, если из размер большой), загружаются в images.
В таблицах product и gallery прописывабтся соответствующие названия картинок.
Ответом от сервера на ajax-запрос отправляется путь к картинке, который вставляется в соответствующий элемент на клиенте.

Урок 25. Управление товарами, редактирование товара. Часть 1.
=============================================================
В ProductController::editAction получаем все данные по продукту, передаём в вид, в виде по аналогии с addAction строим.

Урок 26. Управление товарами, редактирование товара. Часть 2.
=============================================================
По аналогии с добавлением товара плюс ещё отрисовка формы с выбором соответствующих значений input по сохраненным данным в БД.
Сохраняем изменения в БД. 
Удаление картинки ajax-запросом.

Урок 27. Управление товарами, редактирование товара. Часть 3.
=============================================================
Подправили вывод товаров, чтобы во всех видах выводился только товар со статусом 1 (в продаже).
Также исправлен баг перезаписи картинки в пустоту при сохранении редактируемого товара, в случае, если картинка не менялась.

Урок 28. Управление фильтрами. Часть 1.
=======================================
Добавление, редактирование и удаление групп фильтров. Работа с таблицей attribute_group.
Одна особенность redbeanPHP есть особенность - имена таблиц не должны включать в себя символ подчеркивания.
Обходится расширением, надо читать документацию. Образец в классе Db.php.

Урок 29. Управление фильтрами. Часть 2.
=======================================
Добавление групп фильтров и атрибутов. Запрашиваем данные из БД, отражаем в виде, планируем необходимые действия.
За действия отвечают соответствующие методы класса FilterController.

Урок 30. Управление фильтрами. Часть 3.
=======================================










